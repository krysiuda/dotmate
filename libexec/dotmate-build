#!/usr/bin/env bash
#
# #synopsis:
# Performs in order: unlink, clean, generate, link
# #description:
# Unlinks existing dotfiles, cleans (removes) all generated files, generates the files, finally links all generated files.
# 
# --dry-run do not perform any opertions, no files, nor links will change
#   --draft perform opertions on the draft directory only, no output files nor links will change
# #usage:
# [--dry-run|--draft]
# #
#

dotmatebuild() {
	local dryrun=""
	local draft=""
	local switch="$1"
	debug " draft=%s dryrun=%s switch=%s\n" "$draft" "$dryrun" "$switch"

	case "$switch" in
	"--dry-run" )
		dryrun="1"
		shift
		;;
	"--draft" )
		draft="1"
		shift
		;;
	"--"* )
		die "unknown switch '$switch'"
		;;
	* )
		;;
	esac
	debug " draft=%s dryrun=%s\n" "$draft" "$dryrun"

	local unlinkpath=${basedir}/${basename}-unlink
	local cleanpath=${basedir}/${basename}-clean
	local generatepath=${basedir}/${basename}-generate
	local linkpath=${basedir}/${basename}-link

	debug "step 1: unlink draft=%s dryrun=%s\n" "$draft" "$dryrun"
	if [ -z $dryrun ]
	then
		if [ -z $draft ]
		then
			source "$unlinkpath"
			dotmateunlink
		else
			debug "step 1: skiping\n"
		fi
	else
		source "$unlinkpath"
		dotmateunlink --dry-run
	fi
	debug "step 1: done\n"

	debug "step 2: clean\n"
	source "$cleanpath"
	if [ -z $dryrun ]
	then
		if [ -z $draft ]
		then
			dotmateclean
		else
			dotmateclean --draft
		fi
	else
		dotmateclean --dry-run
	fi
	debug "step 2: done\n"

	debug "step 3: generate\n"
	source "$generatepath"
	if [ -z $dryrun ]
	then
		if [ -z $draft ]
		then
			dotmategenerate "$@"
		else
			dotmategenerate --draft "$@"
		fi
	else
		dotmategenerate --dry-run "$@"
	fi
	debug "step 3: done\n"

	debug "step 4: link\n"
	if [ -z $dryrun ]
	then
		if [ -z $draft ]
		then
			source "$linkpath"
			dotmatelink
		else
			debug "step 4: skiping\n"
		fi
	else
		source "$linkpath"
		dotmatelink --dry-run
	fi
	debug "step 4: done\n"
}

isrunning "dotmate-build" && dotmatebuild "$@"

